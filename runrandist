#!/usr/bin/python

import sys
import time
import os
import subprocess
import socket
import argparse
from string import find
from datetime import date

success="The test was happy and you should be too!"

class student:
  def __init__(self):
    name=""
    last4=""

files = []
students = []
resfile=0

def getfnx():
  strx=raw_input("verilog file name with .v (enter if done) ").strip()
  return strx

def getfiles(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      ln = ln.strip()
      files.append(ln)
    fs.close()
  else:
    fs = open(fn,"w")
    print("\n\nEnter the file names in descending hierarchy order.")
    print("Enter the top level first");
    while(True):
      strx = getfnx()
      if(strx==""):
        break
      fs.write("{0}\n".format(strx))
      files.append(strx)
    fs.close()
    
def getstudents(fn):
  if(os.path.isfile(fn)):
    fs = open(fn,"r")
    for ln in fs.readlines():
      recs=ln.split("^")
      stud = student()
      stud.name=recs[1]
      stud.last4=recs[2]
      students.append(stud)
    fs.close()
  else:
    fs = open(fn,"w")
    namex = raw_input( "\n\nEnter student Name ").strip()
    last4 = raw_input("Enter the last 4 of the SJSU ID ").strip()
    fs.write("^{0}^{1}^\n".format(namex,last4))
    stud = student()
    stud.name = namex
    stud.last4 = last4
    students.append(stud)
    fs.close()


  
###################################################
# create the test bench                           #
###################################################
def maketb(tbname,debug,mgates,clkperiod):
  ft = open(tbname,"w")
  ft.write("""
// A simple test bench for the random distribution problem
// Written in a low level verilog
// Uses a test case file
//

`timescale 1ns/10ps

module top();

reg clk,rst;
reg pushin;
reg [63:0] U1,U2,Zexp;
wire pushout;
wire [63:0] Z;
real x1,x2,x3;
integer fin;
reg [63:0] expFIFO[0:1023];
reg [9:0] hpt,tpt;
reg running=0;

reg bad=0;

randist r(clk,rst,pushin,U1,U2,pushout,Z);

initial begin
  hpt=0;
  tpt=0;
 // $dumpfile("randist.vcd");
 // $dumpvars(9,top);

end

task die;
  input [60*8-1:0] msg;
  begin
    repeat(5) $display("- - - - - - - - - - - v v v v - - -");
    while(msg[60*8-1:60*8-8]==0) msg = msg << 8;
    $display("Error --> %60s",msg);
    $display("Simulation failed... Fix it and try again");
    repeat(5) $display("* * * * * * * * * * * ^ ^ ^ ^ * * *");
    bad=1;
    #10;
    $finish;
  end
endtask

task addexp;
input [63:0] exp;
begin
  expFIFO[hpt]=exp;
  hpt=hpt+1;
  if(hpt==tpt) begin
    die("Not enough pushouts >1023 pushins pending");
    $finish;
  end
end
endtask

initial begin
  rst=0;
  clk=1;
  pushin=0;
  repeat(10000000) #5 clk= ~clk;
  die("used > 10M clocks");
  $finish;
end

reg oldpush,push;
reg [63:0] oldZ;
reg [60*8-1:0] badmsg;
real rexp,rz,delta;
reg [60*8-1:0] dmsg;

always @(posedge(clk)) begin
  oldpush=pushout;
  oldZ = Z;
  #0.3;
  if(running) begin
    if(pushout === 1'bX) die("pushout is x");
    if(pushout !== oldpush) die("No hold time on pushout");
    if(oldZ !== Z) die("No hold time on Z");
    if(pushout===1'b1) begin
      rexp = $bitstoreal(expFIFO[tpt]);
      rz = $bitstoreal(Z);
      delta = rexp-rz;
      if(delta < 0) delta=-delta;
      if(delta > 1e-8) begin
        dmsg=$sformatf("Bad Z --> Exp %016h Got %016h delta %f",expFIFO[tpt],Z,delta);
        die(dmsg);
      end
      tpt=tpt+1;
    end
  end

end

integer fpc=0;
reg [1024*8-1:0] sin;
integer qqx,bb;
integer tc_cnt=0;
initial begin
  U1=0;
  U2=0;
  #1 rst=1;
  repeat(5) @(posedge(clk));
  #1 rst=0;
  @(posedge(clk)) #1;
  running=1;
  fin = $fopen("/home/morris/randist/tc.txt","r");
  if(fin == 0) begin
    $display("Error, could not open the test cases file");
    $finish();
  
  end
  
  while($fgets(sin,fin) && tc_cnt < 100000) begin
    qqx=0;
    while(qqx < 1023 && sin[1024*8-1:1024*8-8]==0) begin
      sin = sin << 8;
      qqx=qqx+1;
    end

    if(sin[1024*8-1:1024*8-8]==8'h23) begin
//      Comment line in test case file
    end else begin
      bb=$sscanf(sin,"%x %x %x %f %f %f",U1,U2,Zexp,x1,x2,x3);
//      $display("%f %f %f",x1,x2,x3);
      if(fpc < 20) repeat(100) @(posedge(clk)) #1;
      fpc=fpc+1;
      if(fpc > 200) repeat($random()&'h3) @(posedge(clk)) #1;
      pushin=1;
      addexp(Zexp);
      @(posedge(clk)) #1;
      pushin=0;
      tc_cnt=tc_cnt+1;
    end
  end
  $fclose(fin);
  repeat(500) @(posedge(clk));
  if(hpt != tpt) die("Not all data pushed out");
  $display("\\n\\n\\nThe test was happy and you should be too!\\n\\n\\n");
  $finish();
end

endmodule

      """)  
  ft.close()

###############################
# copies a file if needed     #
###############################
def copyifneeded(localfile,remotefile):
  if(os.path.isfile(localfile)):
    return
  print("\nCopying {0} to local directory".format(str(localfile)))
  cmd = ["cp", str(remotefile), str(localfile) ]
  subprocess.call(cmd)
####################################
# checks to see if a file contains #
# any substrings passed            #
####################################
def filehasany(fn,stx):
  rv = False
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      for sub in stx:
        if( find(ln.lower(),sub)>= 0 ):
          print "-->",ln.strip(),"<--"
          rv=True
  return rv

###############################
# checks to see if a file has #
# a string                    #
###############################
def filehas(fn,stx):
  if(os.path.isfile(fn)):
    fw = open(fn,"r")
    for ln in fw.readlines():
      if( find(ln,stx)>=0 ):
        print "-->",ln.strip(),"<--"
        fw.close()
        return True
    fw.close()
  return False
##############################
# run vcs simulation         #
##############################
def runvcs(debopt):
  ff = open("files.f","w")
  ff.write("trand.v\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("trand.v",deb,False,10)
  
  subprocess.call(["rm","-rf","simres.txt","simv"])
  subprocess.call(["csh","-c","./v_vcs -f files.f | tee simres.txt"])
  if(filehas("simres.txt",success)):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("VCS simulation worked\n");
    print "\n\n\n------ VCS simulation worked \n\n\n"
  else:
    resfile.write("VCS FAILED TO WORK\n")
    print "\n\n\nVCS Failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog simulation   #
##############################
def runnc(debopt):
  ff = open("files.f","w")
  ff.write("trand.v\n")
  for lx in reversed(files):
    ff.write("{0}\n".format(lx))
  ff.close()
  deb=1 if(debopt) else 0
  maketb("trand.v",deb,False,10)
  print "\n\n    Starting NC verilog \n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./v_nc -f files.f | tee simres.txt"])
  if(filehas("simres.txt",success)):
    if(debopt):
      resfile.write("debug {0} \n".format(debopt))
    resfile.write("NCverilog simulation worked\n");
    print "\n\n\n------ NCverilog simulation worked \n\n\n"
  else:
    resfile.write("NCverilog FAILED TO WORK\n")
    print "\n\n\nNCVerilog failed to work\n\n"
    resfile.close()
    exit()
##############################
# run ncverilog gate sim     #
##############################
def rungates(debopt,clkperiod):
  ff = open("files.f","w")
  ff.write("trand.v\nrandist_gates.v")
  ff.close()
  deb=1 if(debopt) else 0
  maketb("trand.v",deb,True,clkperiod*2.5)
  print "\n\n    Starting NC verilog gate level simulation\n\n"
  subprocess.call(["rm","-rf","simres.txt"])
  subprocess.call(["csh","-c","./v_ncgates -f files.f | tee simres.txt"])
  if(filehas("simres.txt",success)):
    if(debopt):
      resfile.write("debug {0}\n".format(debopt))
    resfile.write("Gate level simulation worked\n");
    print "\n\n\n------ Gate level simulation worked \n\n\n"
  else:
    resfile.write("Gates FAILED TO WORK\n")
    print "\n\n\nGates failed to work\n\n"
    resfile.close()
    exit()
#####################################
# makes a synthesis script of the things
#####################################
def makeSynScript(fn,clkx):
  clkperiod = float(clkx);
  fs = open(fn,"w")
  fs.write("""set link_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25 /apps/synopsys/I-2013.12-SP5/libraries/syn/dw_foundation.sldb}
set target_library {/apps/toshiba/sjsu/synopsys/tc240c/tc240c.db_NOMIN25}
""")
  for fnx in reversed(files):
    if(not (find(fnx,"DW02")>=0) ):
      fs.write("read_verilog {0}\n".format(fnx))
      if(filehas(fnx,"clk")):
        fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod*0.75))
        fs.write("""set_propagated_clock clk
set_clock_uncertainty 0.25 clk
set_propagated_clock clk
set_output_delay 0.5 -clock clk [all_outputs]
set all_inputs_wo_rst_clk [remove_from_collection [remove_from_collection [all_inputs] [get_port clk]] [get_port rst]]
set_driving_cell -lib_cell CND2X1 $all_inputs_wo_rst_clk
set_input_delay 0.6 -clock clk $all_inputs_wo_rst_clk
set_output_delay 0.6 -clock clk [all_outputs]
set_fix_hold [ get_clocks clk ]
""")
        fs.write("set_output_delay 0.3 -clock clk [all_outputs]\n")
        fs.write("create_clock clk -name clk -period {0}\n".format(clkperiod*0.7))
      fs.write("compile_ultra\n")
  fs.write("""
create_clock clk -name clk -period {0}
update_timing
report_timing -max_paths 5
""".format(clkperiod))
  fs.write("""write -hierarchy -format verilog -output randist_gates.v
""")
  fs.write("quit\n")
  fs.close()
    
#####################################
# run the synopsys synthesizer      #
#####################################
def runsynthesis(clkperiod):
  makeSynScript("synthesis.script",clkperiod)
  fq = open("sss","w")
  fq.write("""#!/usr/bin/csh
source design_ssc.csh
which dc_shell
dc_shell -f synthesis.script | tee synres.txt
""")
  fq.close()
  subprocess.call(["chmod","+x","sss"])
  subprocess.call(["rm","-f","synres.txt"])
  subprocess.call(["./sss"])
  if( not os.path.isfile("synres.txt") ):
    resfile.write("///// Synthesis failed to produce results /////\n")
    print "\n\nNo synthesis results\n\n"
    exit()
  if( filehasany("synres.txt",["error","latch","violated","timing arc"]) ):
    resfile.write("///// Synthesis failed /////\n");
    print "\n\nsynthesis failed\n\n"
    exit()
  resfile.write("Synthesis finished OK\n")
####################################
# The main routine                 #
####################################
def mainx():
  clkperiod=1000.0/220.0
  resfn="results.txt"

  parser = argparse.ArgumentParser(description='randist project')
  parser.add_argument("-s","--synthesis",dest="synthesis",default=False,help="only run synthesis",action="store_true");
  parser.add_argument("--nogates",dest="nogates",default=False,help="No gate level simulation", action="store_true")
  parser.add_argument("-d","--debug",dest="debug",default=False,help="Debug mode",action="store_true")
  parser.add_argument("-g","--gates",dest="gates",default=False,help="just simulate gates",action="store_true")
  parser.add_argument("resultsFileName",default="results.txt")
  args = parser.parse_args()
  print args
#  return
  if(find(args.resultsFileName,".v")>0 or args.resultsFileName.find(".sv")>0):
    print("the second argument should be the result name\n")
    print("Not a design file name")
    return
  resfn=args.resultsFileName
  global resfile
  resfile = open(resfn,"w")
  resfile.write("randist script run started on {0}\n".format(str(time.asctime())))
  resfile.write("run on machine {0}\n\n".format(socket.gethostname()))
  resfile.write("Run with a clock period of {0}\n".format(clkperiod));
  
  getstudents("names.txt")
  print "student names"
  resfile.write("student names\n");
  for sx in students:
    print " ",sx.name,sx.last4
    resfile.write("  {0}  {1}\n".format(sx.name,sx.last4))
  getfiles("files.txt")
  print "user design files"
  for sx in files:
    print " ",sx
  copyifneeded("v_vcs","/home/morris/randist/v_vcs")
  copyifneeded("v_nc","/home/morris/randist/v_nc")
  copyifneeded("v_ncgates","/home/morris/randist/v_ncgates")
  copyifneeded("design_ssc.csh","/home/morris/randist/design_ssc.csh")
  print "options syn {0} gates {1}".format(args.synthesis,args.gates)
  resfile.write( "options syn {0} gates {1}\n".format(args.synthesis,args.gates))
  if(not (args.synthesis or args.gates) ):
    runvcs(args.debug)
    runnc(args.debug)
  if( not (args.gates) ):
    runsynthesis(clkperiod)
  if( not (args.nogates) ):
    rungates(args.debug,clkperiod)
  if(args.synthesis or args.gates or args.nogates):
    resfile.write("--->> Partial run, do not submit for credit <<--\n")
    print "--->> Partial run, do not submit for credit <<--\n"
    resfile.close()
    exit()
  resfile.write("Completed the randist run\n")
  print("\n\n\nCompleted the randist run\n\n")
  resfile.close()

mainx()
